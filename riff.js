"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Riff {
    constructor() {
        this.id = 'RIFF';
        this.format = 'WAVE';
        this.subChunks = [];
    }
    static isChunk(buffer) {
        const id = buffer.readUIntBE(0, 4);
        const idName = Buffer.from(id.toString(16), 'hex').toString();
        return idName == 'RIFF';
    }
    static from(buffer) {
        const chunk = new Riff();
        chunk.id = Buffer.from(buffer.readUIntBE(0, 4).toString(16), 'hex').toString();
        chunk.size = buffer.readUIntLE(4, 4);
        chunk.chunkLength = chunk.size + 8;
        chunk.format = Buffer.from(buffer.readUIntBE(8, 4).toString(16), 'hex').toString();
        let pos = 12;
        while (pos < chunk.chunkLength) {
            if (Fmt.isChunk(buffer.slice(pos))) {
                const sub = Fmt.from(buffer.slice(pos));
                chunk.subChunks.push(sub);
                pos += sub.chunkLength;
                continue;
            }
            else if (WavData.isChunk(buffer.slice(pos))) {
                const sub = WavData.from(buffer.slice(pos));
                chunk.subChunks.push(sub);
                pos += sub.chunkLength;
                continue;
            }
            else {
                break;
            }
        }
        return chunk;
    }
    isValid() {
        if (!Boolean(this.id && this.size && this.format)) {
            throw new Error('RIFF chunk id, size or format is not contained. invalid format.');
        }
        if (this.id != 'RIFF') {
            throw new Error(`RIFF chunk id is not RIFF. invalid format. id:${this.id}`);
        }
        if (this.format != 'WAVE') {
            throw new Error(`RIFF chunk format is not WAVE. invalid format. format:${this.format}`);
        }
        let sumChunkLength = 0;
        for (let chunk of this.subChunks) {
            sumChunkLength += chunk.chunkLength;
        }
        if ((this.chunkLength - 12) != sumChunkLength) {
            throw new Error(`RIFF chunk chunkLength is not valid length, or sub chunk is broken. invalid format.
        declared size:${this.size},
        chunkLength:${this.chunkLength},
        header size:12,
        sum chunkLength:${sumChunkLength}`);
        }
        for (let chunk of this.subChunks) {
            if (!chunk.isValid()) {
                return false;
            }
        }
        return true;
    }
    dump(offset) {
        if (!this.isValid()) {
            return false;
        }
        let tables = [];
        tables.push({ position: offset, length: 4, header: 'Chunk ID "RIFF"', data: this.id });
        tables.push({ position: offset + 4, length: 4, header: 'Chunk Size', data: this.size });
        tables.push({ position: offset + 8, length: 4, header: 'Format "WAVE"', data: this.format });
        offset = 12;
        for (let chunk of this.subChunks) {
            let tableInfos = chunk.dump(offset);
            tables = tables.concat(tableInfos);
            offset += chunk.chunkLength;
        }
        return tables;
    }
}
exports.Riff = Riff;
class Fmt {
    constructor() {
        this.chunkLength = 24;
        this.id = 'fmt ';
        this.size = 16;
        this.audioFormat = 1;
    }
    static isChunk(buffer) {
        const id = buffer.readUIntBE(0, 4);
        const idName = Buffer.from(id.toString(16), 'hex').toString();
        return idName == 'fmt ';
    }
    static from(buffer) {
        const chunk = new Fmt();
        chunk.id = Buffer.from(buffer.readUIntBE(0, 4).toString(16), 'hex').toString();
        chunk.size = buffer.readUIntLE(4, 4);
        chunk.audioFormat = buffer.readUIntLE(8, 2);
        chunk.numChannels = buffer.readUIntLE(10, 2);
        chunk.sampleRate = buffer.readUIntLE(12, 4);
        chunk.byteRate = buffer.readUIntLE(16, 4);
        chunk.blockAlign = buffer.readUIntLE(20, 2);
        chunk.bitsPerSample = buffer.readUIntLE(22, 2);
        return chunk;
    }
    isValid() {
        if (!Boolean(this.id &&
            this.size &&
            this.audioFormat &&
            this.numChannels &&
            this.sampleRate &&
            this.byteRate &&
            this.blockAlign &&
            this.bitsPerSample)) {
            throw new Error('fmt chunk id, size, audioFormat, numChannels, sampleRate, byteRate, blockAlign or bitsPerSample is not contained. invalid format.');
        }
        if (this.id != 'fmt ') {
            throw new Error(`fmt chunk format is not fmt. invalid format. id:${this.id}`);
        }
        if (this.size != 16) {
            throw new Error(`fmt chunk size is not 16. invalid format. size:${this.size}`);
        }
        if (this.audioFormat != 1) {
            throw new Error(`fmt chunk audioFormat is not 1. invalid format. audioFormat:${this.audioFormat}`);
        }
        return true;
    }
    dump(offset) {
        if (!this.isValid()) {
            return false;
        }
        let tables = [];
        tables.push({ position: offset, length: 4, header: 'Subchunk1 ID "fmt "', data: this.id });
        tables.push({ position: offset + 4, length: 4, header: 'Subchunk1 Size', data: this.size });
        tables.push({ position: offset + 8, length: 2, header: 'Audio Format "1" PCM', data: this.audioFormat });
        tables.push({ position: offset + 10, length: 2, header: 'Num Channels', data: this.numChannels });
        tables.push({ position: offset + 12, length: 4, header: 'Sample Rate', data: this.sampleRate });
        tables.push({ position: offset + 16, length: 4, header: 'Byte Rate', data: this.byteRate });
        tables.push({ position: offset + 20, length: 2, header: 'Block Align', data: this.blockAlign });
        tables.push({ position: offset + 22, length: 2, header: 'Bits Per Sample', data: this.bitsPerSample });
        return tables;
    }
}
class WavData {
    constructor() {
        this.id = 'data';
    }
    static isChunk(buffer) {
        const id = buffer.readUIntBE(0, 4);
        const idName = Buffer.from(id.toString(16), 'hex').toString();
        return idName == 'data';
    }
    static from(buffer) {
        const chunk = new WavData();
        chunk.id = Buffer.from(buffer.readUIntBE(0, 4).toString(16), 'hex').toString();
        chunk.size = buffer.readUIntLE(4, 4);
        chunk.chunkLength = chunk.size + 8;
        chunk.wavBuffer = buffer.slice(8, chunk.size + 8);
        return chunk;
    }
    isValid() {
        if (!Boolean(this.id && this.size && this.wavBuffer)) {
            throw new Error('data chunk id, size or data is not contained. invalid format.');
        }
        if (this.id != 'data') {
            throw new Error(`data chunk id is not data. invalid format. id:${this.id}`);
        }
        if (this.wavBuffer.length != this.size) {
            throw new Error(`data chunk chunkLength is not valid length. invalid format.
        declared size:${this.size},
        chunkLength:${this.chunkLength},
        header size:8,
        buffer length:${this.wavBuffer.length}`);
        }
        return true;
    }
    dump(offset) {
        if (!this.isValid()) {
            return false;
        }
        let tables = [];
        tables.push({ position: offset, length: 4, header: 'Subchunk2 ID "data"', data: this.id });
        tables.push({ position: offset + 4, length: 4, header: 'Subchunk2 Size', data: this.size });
        tables.push({ position: offset + 8, length: this.size, header: 'Wave Data', data: '******' });
        return tables;
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,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U0FBUyxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ3RDLE1BQU0sSUFBSSxLQUFLLENBQUM7d0JBQ0UsSUFBSSxDQUFDLElBQUk7c0JBQ1gsSUFBSSxDQUFDLFdBQVc7O3dCQUVkLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztTQUM1QztRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUNELElBQUksQ0FBQyxNQUFjO1FBQ2pCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDbkIsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUNELElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUNoQixNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxxQkFBcUIsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBQyxDQUFDLENBQUM7UUFDekYsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFDLFFBQVEsRUFBRSxNQUFNLEdBQUcsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLGdCQUFnQixFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQztRQUMxRixNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUMsUUFBUSxFQUFFLE1BQU0sR0FBRyxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFDLENBQUMsQ0FBQztRQUM1RixPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0NBQ0YiLCJmaWxlIjoicmlmZi5qcyIsInNvdXJjZXNDb250ZW50IjpbImludGVyZmFjZSBDaHVuayB7XG4gIGNodW5rTGVuZ3RoOiBudW1iZXI7XG4gIGlkOiBzdHJpbmc7XG4gIHNpemU6IG51bWJlcjtcbiAgaXNWYWxpZCgpOiBib29sZWFuO1xuICBkdW1wKG9mZnNldDogbnVtYmVyKTogYW55O1xufVxuXG4vKipcbiAqIFJJRkZcbiAqL1xuZXhwb3J0IGNsYXNzIFJpZmYgaW1wbGVtZW50cyBDaHVuayB7XG4gIGNodW5rTGVuZ3RoOiBudW1iZXI7XG4gIGlkOiBzdHJpbmcgPSAnUklGRic7XG4gIHNpemU6IG51bWJlcjtcbiAgZm9ybWF0OiBzdHJpbmcgPSAnV0FWRSc7XG4gIHN1YkNodW5rczogQ2h1bmtbXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKCkge31cbiAgc3RhdGljIGlzQ2h1bmsoYnVmZmVyOiBCdWZmZXIpIHtcbiAgICBjb25zdCBpZCA9IGJ1ZmZlci5yZWFkVUludEJFKDAsIDQpO1xuICAgIGNvbnN0IGlkTmFtZSA9IEJ1ZmZlci5mcm9tKGlkLnRvU3RyaW5nKDE2KSwgJ2hleCcpLnRvU3RyaW5nKCk7XG4gICAgcmV0dXJuIGlkTmFtZSA9PSAnUklGRic7XG4gIH1cbiAgc3RhdGljIGZyb20oYnVmZmVyOiBCdWZmZXIpIHtcbiAgICBjb25zdCBjaHVuayA9IG5ldyBSaWZmKCk7XG4gICAgLy8gMS00IENodW5rIElEIFwiUklGRlwiXG4gICAgY2h1bmsuaWQgPSBCdWZmZXIuZnJvbShidWZmZXIucmVhZFVJbnRCRSgwLCA0KS50b1N0cmluZygxNiksICdoZXgnKS50b1N0cmluZygpO1xuICAgIC8vIDUtOCBDaHVuayBTaXplXG4gICAgY2h1bmsuc2l6ZSA9IGJ1ZmZlci5yZWFkVUludExFKDQsIDQpO1xuICAgIGNodW5rLmNodW5rTGVuZ3RoID0gY2h1bmsuc2l6ZSArIDg7XG4gICAgLy8gOS0xMiAgRm9ybWF0IFwiV0FWRVwiXG4gICAgY2h1bmsuZm9ybWF0ID0gQnVmZmVyLmZyb20oYnVmZmVyLnJlYWRVSW50QkUoOCwgNCkudG9TdHJpbmcoMTYpLCAnaGV4JykudG9TdHJpbmcoKTtcbiAgICAvLyAxMy0gICBTdWJDaHVua3NcbiAgICBsZXQgcG9zID0gMTI7XG4gICAgd2hpbGUgKHBvcyA8IGNodW5rLmNodW5rTGVuZ3RoKSB7XG4gICAgICBpZiAoRm10LmlzQ2h1bmsoYnVmZmVyLnNsaWNlKHBvcykpKSB7XG4gICAgICAgIGNvbnN0IHN1YiA9IEZtdC5mcm9tKGJ1ZmZlci5zbGljZShwb3MpKTtcbiAgICAgICAgY2h1bmsuc3ViQ2h1bmtzLnB1c2goc3ViKTtcbiAgICAgICAgcG9zICs9IHN1Yi5jaHVua0xlbmd0aDtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IGVsc2UgaWYgKFdhdkRhdGEuaXNDaHVuayhidWZmZXIuc2xpY2UocG9zKSkpIHtcbiAgICAgICAgY29uc3Qgc3ViID0gV2F2RGF0YS5mcm9tKGJ1ZmZlci5zbGljZShwb3MpKTtcbiAgICAgICAgY2h1bmsuc3ViQ2h1bmtzLnB1c2goc3ViKTtcbiAgICAgICAgcG9zICs9IHN1Yi5jaHVua0xlbmd0aDtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gcmV0dXJuXG4gICAgcmV0dXJuIGNodW5rO1xuICB9XG4gIGlzVmFsaWQoKTogYm9vbGVhbiB7XG4gICAgLy8gdmFsdWVcbiAgICBpZiAoIUJvb2xlYW4odGhpcy5pZCAmJiB0aGlzLnNpemUgJiYgdGhpcy5mb3JtYXQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JJRkYgY2h1bmsgaWQsIHNpemUgb3IgZm9ybWF0IGlzIG5vdCBjb250YWluZWQuIGludmFsaWQgZm9ybWF0LicpO1xuICAgIH1cbiAgICBpZiAodGhpcy5pZCAhPSAnUklGRicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgUklGRiBjaHVuayBpZCBpcyBub3QgUklGRi4gaW52YWxpZCBmb3JtYXQuIGlkOiR7dGhpcy5pZH1gKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuZm9ybWF0ICE9ICdXQVZFJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBSSUZGIGNodW5rIGZvcm1hdCBpcyBub3QgV0FWRS4gaW52YWxpZCBmb3JtYXQuIGZvcm1hdDoke3RoaXMuZm9ybWF0fWApO1xuICAgIH1cbiAgICAvLyBsZW5ndGhcbiAgICBsZXQgc3VtQ2h1bmtMZW5ndGggPSAwO1xuICAgIGZvciAobGV0IGNodW5rIG9mIHRoaXMuc3ViQ2h1bmtzKSB7XG4gICAgICBzdW1DaHVua0xlbmd0aCArPSBjaHVuay5jaHVua0xlbmd0aDtcbiAgICB9XG4gICAgaWYgKCh0aGlzLmNodW5rTGVuZ3RoIC0gMTIpICE9IHN1bUNodW5rTGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFJJRkYgY2h1bmsgY2h1bmtMZW5ndGggaXMgbm90IHZhbGlkIGxlbmd0aCwgb3Igc3ViIGNodW5rIGlzIGJyb2tlbi4gaW52YWxpZCBmb3JtYXQuXG4gICAgICAgIGRlY2xhcmVkIHNpemU6JHt0aGlzLnNpemV9LFxuICAgICAgICBjaHVua0xlbmd0aDoke3RoaXMuY2h1bmtMZW5ndGh9LFxuICAgICAgICBoZWFkZXIgc2l6ZToxMixcbiAgICAgICAgc3VtIGNodW5rTGVuZ3RoOiR7c3VtQ2h1bmtMZW5ndGh9YCk7XG4gICAgfVxuICAgIC8vIHN1YiBjaHVua1xuICAgIGZvciAobGV0IGNodW5rIG9mIHRoaXMuc3ViQ2h1bmtzKSB7XG4gICAgICBpZiAoIWNodW5rLmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGR1bXAob2Zmc2V0OiBudW1iZXIpOiBhbnkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgbGV0IHRhYmxlcyA9IFtdO1xuICAgIHRhYmxlcy5wdXNoKHtwb3NpdGlvbjogb2Zmc2V0LCBsZW5ndGg6IDQsIGhlYWRlcjogJ0NodW5rIElEIFwiUklGRlwiJywgZGF0YTogdGhpcy5pZH0pO1xuICAgIHRhYmxlcy5wdXNoKHtwb3NpdGlvbjogb2Zmc2V0ICsgNCwgbGVuZ3RoOiA0LCBoZWFkZXI6ICdDaHVuayBTaXplJywgZGF0YTogdGhpcy5zaXplfSk7XG4gICAgdGFibGVzLnB1c2goe3Bvc2l0aW9uOiBvZmZzZXQgKyA4LCBsZW5ndGg6IDQsIGhlYWRlcjogJ0Zvcm1hdCBcIldBVkVcIicsIGRhdGE6IHRoaXMuZm9ybWF0fSk7XG5cbiAgICBvZmZzZXQgPSAxMjtcbiAgICBmb3IgKGxldCBjaHVuayBvZiB0aGlzLnN1YkNodW5rcykge1xuICAgICAgbGV0IHRhYmxlSW5mb3MgPSBjaHVuay5kdW1wKG9mZnNldCk7XG4gICAgICB0YWJsZXMgPSB0YWJsZXMuY29uY2F0KHRhYmxlSW5mb3MpO1xuICAgICAgb2Zmc2V0ICs9IGNodW5rLmNodW5rTGVuZ3RoO1xuICAgIH1cbiAgICByZXR1cm4gdGFibGVzO1xuICB9XG59XG5cbi8qKlxuICogZm10IENodW5rXG4gKi9cbmNsYXNzIEZtdCBpbXBsZW1lbnRzIENodW5rIHtcbiAgY2h1bmtMZW5ndGg6IG51bWJlciA9IDI0O1xuICBpZDogc3RyaW5nID0gJ2ZtdCAnO1xuICBzaXplOiBudW1iZXIgPSAxNjtcbiAgYXVkaW9Gb3JtYXQ6IG51bWJlciA9IDE7XG4gIG51bUNoYW5uZWxzOiBudW1iZXI7XG4gIHNhbXBsZVJhdGU6IG51bWJlcjtcbiAgYnl0ZVJhdGU6IG51bWJlcjtcbiAgYmxvY2tBbGlnbjogbnVtYmVyO1xuICBiaXRzUGVyU2FtcGxlOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IoKSB7fVxuICBzdGF0aWMgaXNDaHVuayhidWZmZXI6IEJ1ZmZlcikge1xuICAgIGNvbnN0IGlkID0gYnVmZmVyLnJlYWRVSW50QkUoMCwgNCk7XG4gICAgY29uc3QgaWROYW1lID0gQnVmZmVyLmZyb20oaWQudG9TdHJpbmcoMTYpLCAnaGV4JykudG9TdHJpbmcoKTtcbiAgICByZXR1cm4gaWROYW1lID09ICdmbXQgJztcbiAgfVxuICBzdGF0aWMgZnJvbShidWZmZXI6IEJ1ZmZlcikge1xuICAgIGNvbnN0IGNodW5rID0gbmV3IEZtdCgpO1xuICAgIC8vIDEtNCBTdWJjaHVuazEgSUQgXCJmbXRcIlxuICAgIGNodW5rLmlkID0gQnVmZmVyLmZyb20oYnVmZmVyLnJlYWRVSW50QkUoMCwgNCkudG9TdHJpbmcoMTYpLCAnaGV4JykudG9TdHJpbmcoKTtcbiAgICAvLyA1LTggU3ViY2h1bmsxIFNpemUgXCIxNlwiXG4gICAgY2h1bmsuc2l6ZSA9IGJ1ZmZlci5yZWFkVUludExFKDQsIDQpO1xuICAgIC8vIDktMTAgQXVkaW8gRm9ybWF0IFwiMVwiXG4gICAgY2h1bmsuYXVkaW9Gb3JtYXQgPSBidWZmZXIucmVhZFVJbnRMRSg4LCAyKTtcbiAgICAvLyAxMS0xMiBOdW0gQ2hhbm5lbHNcbiAgICBjaHVuay5udW1DaGFubmVscyA9IGJ1ZmZlci5yZWFkVUludExFKDEwLCAyKTtcbiAgICAvLyAxMy0xNiBTYW1wbGUgUmF0ZVxuICAgIGNodW5rLnNhbXBsZVJhdGUgPSBidWZmZXIucmVhZFVJbnRMRSgxMiwgNCk7XG4gICAgLy8gMTctMjAgQnl0ZSBSYXRlXG4gICAgY2h1bmsuYnl0ZVJhdGUgPSBidWZmZXIucmVhZFVJbnRMRSgxNiwgNCk7XG4gICAgLy8gMjEtMjIgQmxvY2sgQWxpZ25cbiAgICBjaHVuay5ibG9ja0FsaWduID0gYnVmZmVyLnJlYWRVSW50TEUoMjAsIDIpO1xuICAgIC8vIDIzLTI0IEJpdHMgUGVyIFNhbXBsZVxuICAgIGNodW5rLmJpdHNQZXJTYW1wbGUgPSBidWZmZXIucmVhZFVJbnRMRSgyMiwgMik7XG4gICAgLy8gcmV0dXJuXG4gICAgcmV0dXJuIGNodW5rO1xuICB9XG4gIGlzVmFsaWQoKTogYm9vbGVhbiB7XG4gICAgaWYgKFxuICAgICAgIUJvb2xlYW4oXG4gICAgICAgIHRoaXMuaWQgJiZcbiAgICAgICAgICB0aGlzLnNpemUgJiZcbiAgICAgICAgICB0aGlzLmF1ZGlvRm9ybWF0ICYmXG4gICAgICAgICAgdGhpcy5udW1DaGFubmVscyAmJlxuICAgICAgICAgIHRoaXMuc2FtcGxlUmF0ZSAmJlxuICAgICAgICAgIHRoaXMuYnl0ZVJhdGUgJiZcbiAgICAgICAgICB0aGlzLmJsb2NrQWxpZ24gJiZcbiAgICAgICAgICB0aGlzLmJpdHNQZXJTYW1wbGUsXG4gICAgICApXG4gICAgKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdmbXQgY2h1bmsgaWQsIHNpemUsIGF1ZGlvRm9ybWF0LCBudW1DaGFubmVscywgc2FtcGxlUmF0ZSwgYnl0ZVJhdGUsIGJsb2NrQWxpZ24gb3IgYml0c1BlclNhbXBsZSBpcyBub3QgY29udGFpbmVkLiBpbnZhbGlkIGZvcm1hdC4nLFxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuaWQgIT0gJ2ZtdCAnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYGZtdCBjaHVuayBmb3JtYXQgaXMgbm90IGZtdC4gaW52YWxpZCBmb3JtYXQuIGlkOiR7dGhpcy5pZH1gKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc2l6ZSAhPSAxNikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBmbXQgY2h1bmsgc2l6ZSBpcyBub3QgMTYuIGludmFsaWQgZm9ybWF0LiBzaXplOiR7dGhpcy5zaXplfWApO1xuICAgIH1cbiAgICBpZiAodGhpcy5hdWRpb0Zvcm1hdCAhPSAxKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYGZtdCBjaHVuayBhdWRpb0Zvcm1hdCBpcyBub3QgMS4gaW52YWxpZCBmb3JtYXQuIGF1ZGlvRm9ybWF0OiR7dGhpcy5hdWRpb0Zvcm1hdH1gKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgZHVtcChvZmZzZXQ6IG51bWJlcik6IGFueSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBsZXQgdGFibGVzID0gW107XG4gICAgdGFibGVzLnB1c2goe3Bvc2l0aW9uOiBvZmZzZXQsIGxlbmd0aDogNCwgaGVhZGVyOiAnU3ViY2h1bmsxIElEIFwiZm10IFwiJywgZGF0YTogdGhpcy5pZH0pO1xuICAgIHRhYmxlcy5wdXNoKHtwb3NpdGlvbjogb2Zmc2V0ICsgNCwgbGVuZ3RoOiA0LCBoZWFkZXI6ICdTdWJjaHVuazEgU2l6ZScsIGRhdGE6IHRoaXMuc2l6ZX0pO1xuICAgIHRhYmxlcy5wdXNoKHtwb3NpdGlvbjogb2Zmc2V0ICsgOCwgbGVuZ3RoOiAyLCBoZWFkZXI6ICdBdWRpbyBGb3JtYXQgXCIxXCIgUENNJywgZGF0YTogdGhpcy5hdWRpb0Zvcm1hdH0pO1xuICAgIHRhYmxlcy5wdXNoKHtwb3NpdGlvbjogb2Zmc2V0ICsgMTAsIGxlbmd0aDogMiwgaGVhZGVyOiAnTnVtIENoYW5uZWxzJywgZGF0YTogdGhpcy5udW1DaGFubmVsc30pO1xuICAgIHRhYmxlcy5wdXNoKHtwb3NpdGlvbjogb2Zmc2V0ICsgMTIsIGxlbmd0aDogNCwgaGVhZGVyOiAnU2FtcGxlIFJhdGUnLCBkYXRhOiB0aGlzLnNhbXBsZVJhdGV9KTtcbiAgICB0YWJsZXMucHVzaCh7cG9zaXRpb246IG9mZnNldCArIDE2LCBsZW5ndGg6IDQsIGhlYWRlcjogJ0J5dGUgUmF0ZScsIGRhdGE6IHRoaXMuYnl0ZVJhdGV9KTtcbiAgICB0YWJsZXMucHVzaCh7cG9zaXRpb246IG9mZnNldCArIDIwLCBsZW5ndGg6IDIsIGhlYWRlcjogJ0Jsb2NrIEFsaWduJywgZGF0YTogdGhpcy5ibG9ja0FsaWdufSk7XG4gICAgdGFibGVzLnB1c2goe3Bvc2l0aW9uOiBvZmZzZXQgKyAyMiwgbGVuZ3RoOiAyLCBoZWFkZXI6ICdCaXRzIFBlciBTYW1wbGUnLCBkYXRhOiB0aGlzLmJpdHNQZXJTYW1wbGV9KTtcbiAgICByZXR1cm4gdGFibGVzO1xuICB9XG59XG5cbi8qKlxuICogV2F2ZSBEYXRhIENodW5rXG4gKi9cbmNsYXNzIFdhdkRhdGEgaW1wbGVtZW50cyBDaHVuayB7XG4gIGNodW5rTGVuZ3RoOiBudW1iZXI7XG4gIGlkOiBzdHJpbmcgPSAnZGF0YSc7XG4gIHNpemU6IG51bWJlcjtcbiAgd2F2QnVmZmVyOiBCdWZmZXI7XG5cbiAgY29uc3RydWN0b3IoKSB7fVxuICBzdGF0aWMgaXNDaHVuayhidWZmZXI6IEJ1ZmZlcikge1xuICAgIGNvbnN0IGlkID0gYnVmZmVyLnJlYWRVSW50QkUoMCwgNCk7XG4gICAgY29uc3QgaWROYW1lID0gQnVmZmVyLmZyb20oaWQudG9TdHJpbmcoMTYpLCAnaGV4JykudG9TdHJpbmcoKTtcbiAgICByZXR1cm4gaWROYW1lID09ICdkYXRhJztcbiAgfVxuICBzdGF0aWMgZnJvbShidWZmZXI6IEJ1ZmZlcikge1xuICAgIGNvbnN0IGNodW5rID0gbmV3IFdhdkRhdGEoKTtcbiAgICAvLyAxLTQgU3ViY2h1bmsyIElEIFwiZGF0YVwiXG4gICAgY2h1bmsuaWQgPSBCdWZmZXIuZnJvbShidWZmZXIucmVhZFVJbnRCRSgwLCA0KS50b1N0cmluZygxNiksICdoZXgnKS50b1N0cmluZygpO1xuICAgIC8vIDUtOCBTdWJjaHVuazIgU2l6ZVxuICAgIGNodW5rLnNpemUgPSBidWZmZXIucmVhZFVJbnRMRSg0LCA0KTtcbiAgICBjaHVuay5jaHVua0xlbmd0aCA9IGNodW5rLnNpemUgKyA4XG4gICAgLy8gOS0gICBTdWJjaHVuazIgZGF0YVxuICAgIGNodW5rLndhdkJ1ZmZlciA9IGJ1ZmZlci5zbGljZSg4LCBjaHVuay5zaXplICsgOCk7XG4gICAgLy8gcmV0dXJuXG4gICAgcmV0dXJuIGNodW5rO1xuICB9XG4gIGlzVmFsaWQoKTogYm9vbGVhbiB7XG4gICAgLy8gdmFsdWVcbiAgICBpZiAoIUJvb2xlYW4odGhpcy5pZCAmJiB0aGlzLnNpemUgJiYgdGhpcy53YXZCdWZmZXIpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2RhdGEgY2h1bmsgaWQsIHNpemUgb3IgZGF0YSBpcyBub3QgY29udGFpbmVkLiBpbnZhbGlkIGZvcm1hdC4nKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuaWQgIT0gJ2RhdGEnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYGRhdGEgY2h1bmsgaWQgaXMgbm90IGRhdGEuIGludmFsaWQgZm9ybWF0LiBpZDoke3RoaXMuaWR9YCk7XG4gICAgfVxuICAgIC8vIGxlbmd0aFxuICAgIGlmICh0aGlzLndhdkJ1ZmZlci5sZW5ndGggIT0gdGhpcy5zaXplKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYGRhdGEgY2h1bmsgY2h1bmtMZW5ndGggaXMgbm90IHZhbGlkIGxlbmd0aC4gaW52YWxpZCBmb3JtYXQuXG4gICAgICAgIGRlY2xhcmVkIHNpemU6JHt0aGlzLnNpemV9LFxuICAgICAgICBjaHVua0xlbmd0aDoke3RoaXMuY2h1bmtMZW5ndGh9LFxuICAgICAgICBoZWFkZXIgc2l6ZTo4LFxuICAgICAgICBidWZmZXIgbGVuZ3RoOiR7dGhpcy53YXZCdWZmZXIubGVuZ3RofWApO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBkdW1wKG9mZnNldDogbnVtYmVyKTogYW55IHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGxldCB0YWJsZXMgPSBbXTtcbiAgICB0YWJsZXMucHVzaCh7cG9zaXRpb246IG9mZnNldCwgbGVuZ3RoOiA0LCBoZWFkZXI6ICdTdWJjaHVuazIgSUQgXCJkYXRhXCInLCBkYXRhOiB0aGlzLmlkfSk7XG4gICAgdGFibGVzLnB1c2goe3Bvc2l0aW9uOiBvZmZzZXQgKyA0LCBsZW5ndGg6IDQsIGhlYWRlcjogJ1N1YmNodW5rMiBTaXplJywgZGF0YTogdGhpcy5zaXplfSk7XG4gICAgdGFibGVzLnB1c2goe3Bvc2l0aW9uOiBvZmZzZXQgKyA4LCBsZW5ndGg6IHRoaXMuc2l6ZSwgaGVhZGVyOiAnV2F2ZSBEYXRhJywgZGF0YTogJyoqKioqKid9KTtcbiAgICByZXR1cm4gdGFibGVzO1xuICB9XG59XG4iXX0=
